"""
Django settings for TeacherAssist project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import environ
import re

env = environ.Env(
    DEBUG=(bool, False)
)

# Read .env file
environ.Env.read_env(env_file=str(Path(__file__).resolve().parent.parent / ".env"))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR / 'staticfiles'

DEBUG = env.bool("DEBUG", default=False)

RESERVED_SUBDOMAINS = env.list("RESERVED_SUBDOMAINS", default=["admin", "public", "www", "api"])

CORS_ALLOW_CREDENTIALS = True
SITE_DOMAIN = env("SITE_DOMAIN")
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[f".{SITE_DOMAIN}"])
CORS_ALLOWED_ORIGIN_REGEXES = env.list("CORS_ALLOWED_ORIGIN_REGEXES", default=[rf"^https://[a-zA-Z0-9-]+\.{re.escape(SITE_DOMAIN)}$",])
TENANT_SUBDOMAIN_BASE = env.str("TENANT_SUBDOMAIN_BASE", SITE_DOMAIN)
CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS",default=[f"https://*.{SITE_DOMAIN}",f"https://*.{TENANT_SUBDOMAIN_BASE}"])
COOKIE_DOMAIN = env.str("COOKIE_DOMAIN", default=f".{SITE_DOMAIN}")

TENANT_CREATION_REQUIRE_CAPTCHA   = env.bool("TENANT_CREATION_REQUIRE_CAPTCHA",   default=True)
TENANT_CREATION_THROTTLE_ENABLED  = env.bool("TENANT_CREATION_THROTTLE_ENABLED",  default=True)
TENANT_CHECK_THROTTLE_ENABLED     = env.bool("TENANT_CHECK_THROTTLE_ENABLED",     default=True)
REGISTER_THROTTLE_ENABLED         = env.bool("REGISTER_THROTTLE_ENABLED",         default=True)
SITE_NAME                         = env.str( "SITE_NAME",              default="TeacherAssist")
RECAPTCHA_SECRET_KEY              = env.str("RECAPTCHA_SECRET_KEY")
RECAPTCHA_SITE_KEY                = env.str("RECAPTCHA_SITE_KEY")

SHARED_APPS = [
    "django_tenants",
    "tenants",
    "django.contrib.contenttypes",
    "django.contrib.auth",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "grappelli",
    "django.contrib.admin",
    "corsheaders",
    "drf_spectacular",
]

TENANT_APPS = [
    "django.contrib.contenttypes",
    "django.contrib.auth",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "auth.apps.AuthConfig",
    "drf_spectacular",
]

INSTALLED_APPS = list(dict.fromkeys(SHARED_APPS + TENANT_APPS))

TENANT_MODEL = 'tenants.Tenant'
TENANT_DOMAIN_MODEL = 'tenants.Domain'

GRAPPELLI_ADMIN_TITLE = "TeacherAssist Admin"
GRAPPELLI_INDEX_DASHBOARD = "grappelli.dashboard.SelfDashboard"
GRAPPELLI_AUTO_POPULATE = True

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'auth.authentication.CookieJWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_SCHEMA_CLASS' : (
        'drf_spectacular.openapi.AutoSchema'
    ),
    "DEFAULT_THROTTLE_CLASSES": (
        "auth.throttles.ConditionalScopeThrottle",
    ),
    'DEFAULT_PAGINATION_CLASS': 'auth.pagination.CustomPageNumberPagination',
    "DEFAULT_THROTTLE_RATES": {
        "tenant_creation": "5/hour",
        "tenant_check"   : "1000/hour",
        "register"       : "20/hour",
    },
    'PAGE_SIZE': 30,
}

JWT_PRIVATE_KEY_PATH = env.str("JWT_PRIVATE_KEY_PATH",default="private.pem",)
JWT_PUBLIC_KEY_PATH = env.str("JWT_PUBLIC_KEY_PATH",default="public.pem",)

SPECTACULAR_SETTINGS = {
  'TITLE': 'TeacherAssist API',
  'VERSION': 'v1',
  'DESCRIPTION': 'SaaS based platform to do AI processing on books and documents especially curated for teachers',
  'SERVE_INCLUDE_SCHEMA': False,
  'SECURITY': [{"cookieJWT": []}],
}

SIMPLE_JWT = {
    "ALGORITHM": "RS256",
    "SIGNING_KEY": Path(JWT_PRIVATE_KEY_PATH).read_text(),
    "VERIFYING_KEY": Path(JWT_PUBLIC_KEY_PATH).read_text(),
    'ACCESS_TOKEN_LIFETIME':  timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),

    # rotation & blacklist
    'ROTATE_REFRESH_TOKENS':   True,
    'BLACKLIST_AFTER_ROTATION': True,

    # header format
    'AUTH_HEADER_TYPES': ('Bearer',),

    # cookie settings
    'AUTH_COOKIE': 'access_token',
    'AUTH_COOKIE_SECURE': env.bool("AUTH_COOKIE_SECURE", default=True),
    'AUTH_COOKIE_HTTP_ONLY': True,
    'AUTH_COOKIE_SAMESITE': 'Lax',
    'REFRESH_COOKIE': 'refresh_token',
    'REFRESH_COOKIE_SECURE':   True,
    'REFRESH_COOKIE_HTTP_ONLY': True,
    'REFRESH_COOKIE_SAMESITE': 'Lax',
}

MIDDLEWARE = [
    'django_tenants.middleware.main.TenantMainMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE":   "django_tenants.postgresql_backend",
        "NAME":     env("DB_NAME"),
        "USER":     env("DB_USER"),
        "PASSWORD": env("DB_PASSWORD"),
        "HOST":     env("DB_HOST"),
        "PORT":     env("DB_PORT", default="5432"),
    }
}

DATABASE_ROUTERS = ['django_tenants.routers.TenantSyncRouter']


ROOT_URLCONF = 'TeacherAssist.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TeacherAssist.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

BASE_DIR   = Path(__file__).resolve().parent.parent
MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL  = "/media/"

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
TEST_RUNNER = "TeacherAssist.test_runner.TenantTestRunner"
TEST_TENANT_SCHEMA_NAME = env.str("TEST_TENANT_SCHEMA_NAME", default="test_tenant")
REDIS_URL = env.str("REDIS_URL", default="redis://localhost:6379/0")